import java.util.*;

public class FibonacciPartialSum {
    private static long getFibonacciPartialSumNaive(long from, long to) {
        if (to <= 1)
            return to;

        long previous = 0;
        long current  = 1;

        for (long i = 0; i < from - 1; ++i) {
            long tmp_previous = previous;
            previous = current;
            current = tmp_previous + current;
        }

        long sum = current;

        for (long i = 0; i < to - from; ++i) {
            long tmp_previous = previous;
            previous = current;
            current = tmp_previous + current;
            sum += current;
        }

        return sum % 10;
    }
    
    private static int getSum(long m, long n) {
    	if(m > n) return 0;
    	long arr[] = new long [61];
    	arr[0] = 0;
    	arr[1] = 1;
    	for(int i = 2; i <= 60; i++) {
    		arr[i] = (arr[i-1] + arr[i-2]);
    	}
    	m %= 60;
    	n %= 60;
    	if(n < m) n += 60;
    	int sum = 0;
    	for(int j = (int)m; j < n+1; j++) {
    		System.out.println("arr[j%60]: " + arr[j%60] + " j%60: " + j%60 + " j: " + j);
    		sum += arr[j%60];
    	}
    	return sum%10;
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long from = scanner.nextLong();
        long to = scanner.nextLong();
        System.out.println(getSum(from,to));
    }
}

