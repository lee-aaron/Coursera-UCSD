import java.util.*;

public class FibonacciPartialSum {
    private static long getFibonacciPartialSumNaive(long from, long to) {
        if (to <= 1)
            return to;

        long previous = 0;
        long current  = 1;

        for (long i = 0; i < from - 1; ++i) {
            long tmp_previous = previous;
            previous = current;
            current = tmp_previous + current;
        }

        long sum = current;

        for (long i = 0; i < to - from; ++i) {
            long tmp_previous = previous;
            previous = current;
            current = tmp_previous + current;
            sum += current;
        }

        return sum % 10;
    }
    
    private static int getLastDigit(long n) {
    	if(n <= 1) return (int)n;
    	n %= 60;
    	int dig[] = new int[(int)n+1];
    	dig[0] = 0;
    	dig[1] = 1;
    	for(int i = 2; i <= n; i++) {
    		dig[i] = (dig[i-1]%10 + dig[i-2]%10)%10;
    	}
    	if(dig[(int)n] == 0) return 9;
    	return dig[(int)n]%10;
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long from = scanner.nextLong();
        long to = scanner.nextLong();
        if(from == to) {
        	//System.out.println("from: " + getLastDigit(from));
        	System.out.println(getLastDigit(from));
        } else {
        	//System.out.println("from: " + getLastDigit(from+1) + " to: " + getLastDigit(to+2));
        	System.out.println(((getLastDigit(to+2)-1) - (getLastDigit(from+1)-1))%10);
        }
    }
}

