import java.util.*;

public class FibonacciPartialSum {
    private static long getFibonacciPartialSumNaive(long from, long to) {
        if (to <= 1)
            return to;

        long previous = 0;
        long current  = 1;

        for (long i = 0; i < from - 1; ++i) {
            long tmp_previous = previous;
            previous = current;
            current = tmp_previous + current;
        }

        long sum = current;

        for (long i = 0; i < to - from; ++i) {
            long tmp_previous = previous;
            previous = current;
            current = tmp_previous + current;
            sum += current;
        }

        return sum % 10;
    }
    
    private static long fib(long n) {
    	long sum = 0;
    	for(int i = 2; i <= n; i++) {
    		sum += ((i-1)%10 + (i-2)%10)%10;
    	}
    	return sum;
    }
    
    private static int getLastDigit(long m, long n) {
    	if(m == n) {
    		return (int)fib(m % 60);
    	}
    	m %= 60;
    	n %= 60;
    	m = fib(m+1)-1;
    	n = fib(n+2)-1;
    	return (int)(n-m)%10;
    }
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        long from = scanner.nextLong();
        long to = scanner.nextLong();
        System.out.println(getLastDigit(from, to));
    }
}

