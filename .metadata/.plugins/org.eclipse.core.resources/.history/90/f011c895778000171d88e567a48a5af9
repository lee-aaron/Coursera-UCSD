import java.util.Scanner;

public class FractionalKnapsack {
    private static double getOptimalValue(int capacity, int[] values, int[] weights) {
        double value = 0.0;
        //write your code here
        for(int i = 0; i < values.length; i++) {
        	if(capacity == 0) return value;
        	int index = getMaxIndex(values,weights);
        	int min = Math.min(capacity, weights[index]);
        	value += min * (double)values[index]/weights[index];
        	weights[index] -= min;
        	capacity -= min;
        }
        return Math.round(value * 10000d)/1000d;
    }
    
    private static int getMaxIndex(int[] values, int[] weights) {
    	int index = 0;
    	double max = 0.0;
    	for(int i = 0; i < values.length; i++) {
    		if(weights[i] != 0 && (double)values[i]/weights[i] > max) {
    			max = (double)values[i]/weights[i];
    			index = i;
    		}
    	}
    	return index;
    }

    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int capacity = scanner.nextInt();
        int[] values = new int[n];
        int[] weights = new int[n];
        for (int i = 0; i < n; i++) {
            values[i] = scanner.nextInt();
            weights[i] = scanner.nextInt();
        }
        System.out.println(getOptimalValue(capacity, values, weights));
    }
} 
